    WHAT IS JAVA?
Java is a popular programming language and It is owned by Oracle.
It is used for:
-Mobile applications (specially Android apps)
-Desktop applications
-Web applications
-Web servers and application servers
-Games
-Database connection And much, much more!
    Why Use Java?
-Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.).
-It is one of the most popular programming languages in the world.
-Java is an object oriented language which gives a clear structure to programs and allows
code to be reused, lowering development costs.
    How to write Java code(syntax)
-In Java, every application begins with a class name
-The class must match the filename.
-The class name should always start with an uppercase first letter.
    The main method
The main() method is required and you will see it in every Java program.
Any code inside the main() method will be executed.
The curly braces {} marks the beginning and the end of a block of code.
    System.out.println()
Inside the main() method, we can use the println() method to print a line of text to the screen/console.
-System is a built-in Java class that contains useful members, such as out, which is short for "output".
You should also note that each code statement must end with a semicolon (;).
    Print Text
-println() method, short for "print line", is used to print/output a value to the screen (or a file).
You can add as many println() methods as you want.
Note that it will add a new line for each method.
-Double Quotes
Text must be wrapped inside double quotations marks "".
-print() method: which is similar to println()
The only difference is that it does not insert a new line at the end of the output.
    Print Numbers
You can also use the println() method to print numbers.
However, unlike text, we don't put numbers inside double quotes.
    Java Comments
Comments can be used to explain Java code, and to make it more readable.
It can also be used to prevent execution when testing alternative code.
-Single-line Comments
Single-line comments start with two forward slashes (//).
Any text between // and the end of the line is ignored by Java (will not be executed).
-Java Multi-line Comments
Multi-line comments start with /* and ends with */.
Any text between /* and */ will be ignored by Java.
    Java Variables
Variables are containers for storing data values.
In Java, there are different types of variables, for example
-String: stores text, such as "Hello". String values are surrounded by double quotes.
-int: stores integers (whole numbers), without decimals, such as 123 or -123.
-float: stores floating point numbers, with decimals, such as 19.99 or -19.99.
-char: stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes.
-boolean: stores values with two states: true or false.
    Declaring (Creating) Variables
To create a variable in Java, you need to:
-Choose a type (like int or String).
-Give the variable a name (like x, age, or name).
-Optionally assign it a value using "=".
Syntax
type variableName = value;
    Final Variables
If you don't want to overwrite existing values, use the final keyword
(this will declare the variable as "final" or "constant", which means unchangeable and read-only).
    Display Variables
The println() method is often used to display variables.
    The + operator
-To combine both text and a variable, use the + character.
-You can also use the + character to add a variable to another variable.
-For numeric values, the + character works as a mathematical operator
-To declare more than one variable of the same type, you can use a comma-separated list.
    Java Identifiers
All Java variables must be identified with unique names.
These unique names are called identifiers.
Note: It is recommended to use descriptive names in order to create understandable and maintainable code
    The general rules for naming variables are:
-Names can contain letters, digits, underscores, and dollar signs.
-Names must begin with a letter.
-Names should start with a lowercase letter, and cannot contain whitespace.
-Names can also begin with $ and _.
-Names are case-sensitive.
-Reserved words (like Java keywords, such as int or boolean) cannot be used as names.

    Java Data Types
A variable in Java must be a specified data type.
Data types are divided into two groups:
1)Primitive data types
2)Non-primitive data types(reference types)
    Primitive Data Types
Primitive Data Types can hold only one data(values).
    There are eight primitive data types in Java
1)byte:	Stores whole numbers from -128 to 127.
2)short: Stores whole numbers from -32,768 to 32,767.
3)int: Stores whole numbers from -2,147,483,648 to 2,147,483,647.
4)long:	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.
5)float: Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits.
6)double: Stores fractional numbers. Sufficient for storing 15 to 16 decimal digits.
7)boolean: Stores true or false values.
8)char:	Stores a single character/letter or ASCII values.
    Java Numbers
Primitive number types are divided into two groups.
1)Integer types
-stores whole numbers, positive or negative, without decimals.
-Valid types are byte, short, int and long.
2)Floating point types
-represents numbers with a fractional part, containing one or more decimals.
-There are two types: float and double.
    Integer Types
1)Byte
-The byte data type can store whole numbers from -128 to 127.
-This can be used instead of int or other integer types to save memory
when you are certain that the value will be within -128 and 127:
2)Short
 -The short data type can store whole numbers from -32768 to 32767.
3)Int
-The int data type can store whole numbers from -2147483648 to 2147483647.
-In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.
4)Long
-The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807.
-This is used when int is not large enough to store the value.
-Note that you should end the value with an "L".
    Floating Point Types
You should use a floating point type whenever you need a number with a decimal.
The "float" and "double" data types can store fractional numbers.
Note that you should end the value with an "f" for floats and "d" for doubles.
The precision of a floating point value indicates how many digits the value can have after the decimal point.
1)float
The precision of float is only six or seven decimal digits.
2)double
-This have a precision of about 16 digits.
-Therefore it is safer to use double for most calculations.
    Scientific Numbers
A floating point number can also be a scientific number with an "e" to indicate the power of 10.
    Boolean Types
Java has a boolean data type, which can only take the values true or false.
    Characters
-The char data type is used to store a single character.
-The character must be surrounded by single quotes, like 'A' or 'c'.
-Alternatively, you can use ASCII values to display certain characters.

    Non-primitive data types
Non-primitive data types are called reference types because they refer to objects.
    Strings
The String data type is used to store a sequence of characters (text).
String values must be surrounded by double quotes.
The String type is so much used and integrated in Java, that some call it "the special ninth type".

    Java Type Casting
Type casting is when you assign a value of one primitive data type to another type.
In Java, there are two types of casting:
1)Widening Casting (automatically): converting a smaller type to a larger type size.
byte -> short -> char -> int -> long -> float -> double.
2)Narrowing Casting (manually):  converting a larger type to a smaller size type.
double -> float -> long -> int -> char -> short -> byte.

    Java Operators
Operators are used to perform operations on variables and values.
Java divides the operators into the following groups:
1)Arithmetic operators
2)Assignment operators
3)Comparison operators
4)Logical operators
5)Bitwise operators
    1.Arithmetic operators
Arithmetic operators are used to perform common mathematical operations.
1)Addition(+): Adds together two values.
2)Subtraction(-): Subtracts one value from another.
3)Multiplication(*): Multiplies two values.
4)Division(/): Divides one value by another.
5)Modulus(%): Returns the division remainder.
6)Increment(++): Increases the value of a variable by 1.
7)Decrement(--): Decreases the value of a variable by 1.
    2.Assignment operators
-Assignment operators(=): are used to assign values to variables.
-Addition assignment operator(+=): adds a value to a variable. etc.
    3.Java Comparison Operators
Comparison operators are used to compare two values (or variables).
The return value of a comparison is either true or false.
1)Equal to(==)
2)Not equal (!=)
3)Greater than(>)
4)Less than(<)
5)Greater than or equal to (>=)
6)Less than or equal to (<=)
    4. Logical Operators
You can also test for true or false values with logical operators.
1)Logical and (&&): returns true if both statements are true.
2)Logical or (||): returns true if one of the statement is true.
3)Logical not (!): reverses the result. i.e not this condition.

    Java Strings
Strings are used for storing text.
A String in Java is actually an object,
which contain methods that can perform certain operations on strings.
    String Methods
1)length(): used to check the length(size) of a string.
2)toUpperCase(): converts a string to uppercase.
3)toLowerCase(): converts a string to lowercase.
4)indexOf(parameter): This return the index(the position) of the first occurrence of a specified text in a string.
Java counts positions from zero.
    String Concatenation
The + operator can be used between strings to combine them.
This is called concatenation.
5)concat(): You can use this method to concat two strings.
    Java Numbers and Strings
Java uses the + operator for both addition and concatenation.
Numbers are added. Strings are concatenated.
If you add a number and a string, the result will be a string concatenation.
    Java Special Characters(Escape characters)
backlash(\) escape character: turns special characters into string characters.

    Java Math
The Java Math class has many methods that allows you to perform mathematical tasks on numbers.
1)Math.max(x,y): This method is used to find the highest value of x and y.
2)Math.min(x,y): This method can be used to find the lowest value of x and y.
3)Math.sqrt(x): This method returns the square root of x.
4)Math.abs(x): This method returns the absolute (positive) value of x.
5)Math.random(): returns a random number between 0.0 (inclusive), and 1.0 (exclusive).

    Java Booleans
Java has a boolean data type, which can store true or false values.
-Boolean expression: This returns a boolean value: true or false.

    Java If ... Else
-we use if to specify a block of code to be executed, if a specified condition is true.
-we use else to specify a block of code to be executed, if the same condition is false.
-Use else if to specify a new condition to test, if the first condition is false.
-Use switch to specify many alternative blocks of code to be executed.
    Ternary operator
This is short-hand for if-else.
It is used to replace simple if else statements.
Syntax
varaible = (condition) ? expressionTrue : expressionFalse;
     Switch Statements
Instead of writing many if..else statements, you can use the switch statement.
The switch statement selects one of many code blocks to be executed.
This is how it works:
-The switch expression is evaluated once.
-The value of the expression is compared with the values of each case.
-If there is a match, the associated block of code is executed.
    The break Keyword
A break can save a lot of execution time because it "ignores" the execution of all the rest of the code in the switch block.
    The default Keyword
The default keyword specifies some code to run if there is no case match.

    Loops
Loops can execute a block of code as long as a specified condition is reached.
    Types of loops
1)While loop: loops through a block of code as long as a specified condition is true.
2)Do/While loop: This loop will execute the code block once, before checking if the condition is true.
The loop as long as the condition is true.
3)For loop: When you know exactly how many times you want to loop through a block of code,
use the for loop instead of a while loop.
-Statement 1 is executed (one time) before the execution of the code block.
-Statement 2 defines the condition for executing the code block.
-Statement 3 is executed (every time) after the code block has been executed.
4)For-each Loop: This is used exclusively to loop through elements in an array (or other data structures):

    Java Break and Continue
1)Break statement(stop executing)
It was used to "jump out" of a switch statement.
The break statement can also be used to jump out of a loop.
2)continue statement(skip condition and continue executing)
The continue statement breaks one iteration (in the loop).
if a specified condition occurs, and continues with the next iteration in the loop.

    Java Arrays
Arrays are used to store multiple values in a single variable.
To declare an array, define the variable type with square brackets.
    Access the Elements of an Array
You can access an array element by referring to the index number.
Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.
    Change an Array Element
To change the value of a specific element, refer to the index number
    Array Length
To find out how many elements an array has.
    Loop Through an Array
You can loop through the array elements with the for loop,
and use the length property to specify how many times the loop should run.
    Multidimensional Arrays
A multidimensional array is an array of arrays.
Multidimensional arrays are useful when you want to store data as a tabular form, like a table with rows and columns.
    Access Elements
To access the elements of a Multidimensional array,
specify two indexes: one for the array, and one for the element inside that array.
    Java Methods
A method is a block of code which only runs when it is called.
Methods are used to perform certain actions, and they are also known as functions.
    Create a Method
-A method must be declared within a class.
-It is defined with the name of the method, followed by parentheses ().
-static means that the method belongs to the Main class and not an object of the Main class.
-void means that this method does not have a return value.
    Call a Method
To call a method in Java, write the method's name followed by two parentheses () and a semicolon.
A method can also be called multiple times.
    Parameters and Arguments
Parameters act as variables inside the method.
Information can be passed to methods as a parameter.
Parameters are specified after the method name, inside the parentheses.
You can add as many parameters as you want, just separate them with a comma.
    Return Values
If you want the method to return a value,
you can use a primitive data type (such as int, char, etc.) instead of void,
and use the return keyword inside the method.
    Method Overloading
With method overloading, multiple methods can have the same name with different parameters.
Multiple methods can have the same name as long as the number and/or type of parameters are different.

    Java Scope
In Java, variables are only accessible inside the region they are created.
This is called scope.
    Method Scope
Variables declared directly inside a method are available anywhere in the method
following the line of code in which they were declared.

    Java Recursion
Recursion is the technique of making a function call itself.
    Halting Condition
Just as loops can run into the problem of infinite looping,
recursive functions can run into the problem of infinite recursion.
Every recursive function should have a halting condition.
which is the condition where the function stops calling itself.

    Java OOP
OOP stands for Object-Oriented Programming.
object-oriented programming is about creating objects that contain both data and methods.
    Advantages of OOP
-OOP is faster and easier to execute.
-OOP provides a clear structure for the programs.
-OOP helps to keep the Java code DRY "Don't Repeat Yourself".
Note: You should extract out the codes that are common for the application,
and place them at a single place and reuse them instead of repeating it.
    What are Classes and Objects?
Classes and objects are the two main aspects of object-oriented programming.
So, a class is a template for objects,
and an object is an instance of a class.
When the individual objects are created, they inherit all the variables and methods from the class.
A Class is like an object constructor, or a "blueprint" for creating objects.
    Create a Class
To create a class, use the keyword class followed by the class name.
    Create an Object
To create an object,
-specify the class name,
-followed by the object name,
-and use the keyword new
    Using Multiple Classes
You can also create an object of a class and access it in another class.
    Java Class Attributes
Class attributes are variables within a class.
Another term for class attributes is fields.
    Accessing Attributes
-You can access attributes by creating an object of the class.
by using the dot syntax (.).
-You can also modify attribute values.
-If you don't want the ability to override existing values, declare the attribute as final.
-If you create multiple objects of one class,
-you can change the attribute values in one object, without affecting the attribute values in the other.
    Java Class Methods
methods are declared within a class, and that they are used to perform certain actions.
    Static vs. Public
You will often see Java programs that have either static or public attributes and methods.
-Static methods can be called without creating objects.
-Public methods must be called by creating objects.
Remember that..
The dot (.) is used to access the object's attributes and methods.
    Using Multiple Classes
it is a good practice to create an object of a class and access it in another class.
-Remember that the name of the java file should match the class name.

    Java Constructors
A constructor in Java is a special method that is used to initialize objects.
The constructor is called when an object of a class is created.
Note that
-the constructor name must match the class name,
- it cannot have a return type (like void).
-the constructor is called when the object is created.
All classes have constructors by default:
if you do not create a class constructor yourself, Java creates one for you.
However, then you are not able to set initial values for object attributes.
    Constructor Parameters
Constructors can also take parameters, which is used to initialize attributes.

    Java this
The this keyword in Java refers to the current object in a method or constructor.
The this keyword is often used to avoid confusion when class attributes have the
same name as method or constructor parameters.

    Accessing Class Attributes
Sometimes a constructor or method has a parameter with the same name as a class variable.
When this happens, the parameter temporarily hides the class variable inside that method or constructor.
To refer to the class variable and not the parameter, you can use the this keyword.
    Calling a Constructor from Another Constructor
You can also use this() to call another constructor in the same class.
This is useful when you want to provide default values or reuse initialization code instead of repeating it.
    When to use this?
-When a constructor or method has a parameter with the same name as a class variable,
use this to update the class variable correctly.
-To call another constructor in the same class and reuse code.

    Java Modifiers
The public keyword is an access modifier.
meaning that it is used to set the access level for classes, attributes, methods and constructors.
    We divide modifiers into two groups
1)Access Modifiers - controls the access level.
2)Non-Access Modifiers - do not control access level, but provides other functionality.
    1)Access Modifiers
a)For classes, you can use either public or default.
public: The class is accessible by any other class
default: The class is only accessible by classes in the same package.
This is used when you don't specify a modifier.
b)For attributes, methods and constructors, you can use the one of the following.
-public: The code is accessible for all classes.
-private: The code is only accessible within the declared class.
-default: The code is only accessible in the same package.
This is used when you don't specify a modifier.
-protected: The code is accessible in the same package and subclasses.
    2)Non-Access Modifiers
a)For classes, you can use either final or abstract:
-final:The class cannot be inherited by other classes.
-abstract: The class cannot be used to create objects
To access an abstract class, it must be inherited from another class.
b)For attributes and methods, you can use the one of the following:
-final: Attributes and methods cannot be overridden/modified.
-static: Attributes and methods belongs to the class, rather than an object.
-abstract: Can only be used in an abstract class, and can only be used on methods.
-transient: Attributes and methods are skipped when serializing the object containing them.
-synchronized: Methods can only be accessed by one thread at a time.
-volatile: The value of an attribute is not cached thread-locally, and is always read from the "main memory".
    Final
If you don't want the ability to override existing attribute values, declare attributes as final.
    Static
A static method means that it can be accessed without creating an object of the class, unlike public.
    Abstract
An abstract method belongs to an abstract class and it does not have a body.
The body is provided by the subclass.

    Java Encapsulation
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users.
To achieve this, you must:
-declare class variables/attributes as private.
-provide public get and set methods to access and update the value of a private variable.
    Get and Set
We learned from the previous chapter that private variables can only be accessed within the same class.
i.e (an outside class has no access to it).
However, it is possible to access them if we provide public get and set methods.
The get method returns the variable value.
The set method sets the value.
    Why Encapsulation?
-Better control of class attributes and methods.
-Class attributes can be made read-only (if you only use the get method),
or write-only (if you only use the set method).
-Increased security of data.

    Java Packages & API
A package in Java is used to group related classes.
Think of it as a folder in a file directory.
We use packages to avoid name conflicts, and to write a better maintainable code.
Packages are divided into two categories:
1)Built-in Packages (packages from the Java API).
2)User-defined Packages (create your own packages).
    Built-in Packages
The Java API is a library of prewritten classes.
The library contains components for managing input, database programming, and much much more.
The library is divided into "packages" and "classes".
Meaning you can either
-import a single class (along with its methods and attributes).
-import a whole package that contain all the classes that belong to the specified package.
To use a class or a package from the library, you need to use the "import" keyword.
Syntax
import package.name.Class;   // Import a single class
import package.name.*;   // Import the whole package
    User-defined Packages
To create your own package, you need to understand that Java uses a file system directory to store them.
Just like folders on your computer.
To create a package, use the package keyword.

    Java Inheritance
In Java, it is possible to inherit attributes and methods from one class to another.
We group the "inheritance concept" into two categories.
-subclass (child) - the class that inherits from another class.
-superclass (parent) - the class being inherited from.
To inherit from a class, use the extends keyword.
    Why And When To Use "Inheritance"?
- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.
-If you don't want other classes to inherit from a class, use the final keyword.

    Java Polymorphism
Polymorphism means "many forms".
It occurs when we have many classes that are related to each other by inheritance.
Polymorphism uses methods gotten from Inheritance to perform different tasks.
This allows us to perform a single action in different ways.
    Why And When To Use "Inheritance" and "Polymorphism"?
- It is useful for code reusability
reuse attributes and methods of an existing class when you create a new class.

    Java super
In Java, the super keyword is used to refer to the parent class of a subclass.
The most common use of the super keyword is to eliminate the confusion between
superclasses and subclasses that have methods with the same name.
    It can be used in two main ways:
1)To access attributes and methods from the parent class.
If a subclass has a method with the same name as one in its parent class,
you can use super to call the parent version.
Use super when you want to call a method from the parent class that has been overridden in the child class.
2)To call the parent class constructor.
Use super() to call the constructor of the parent class.
This is especially useful for reusing initialization code.
The call to super() must be the first statement in the subclass constructor.

    Java Inner Classes
In Java, it is also possible to nest classes (a class within a class).
The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.
To access the inner class
create an object of the outer class, and then create an object of the inner class
-If you try to access a private inner class from an outside class, an error occurs
    Static Inner Class
An inner class can also be static, which means that you can access it without creating an object of the outer class.
    Access Outer Class From Inner Class
One advantage of inner classes, is that they can access attributes and methods of the outer class.

    Java Abstraction
Abstract Classes and Methods
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces.
The abstract keyword is a non-access modifier, used for classes and methods
1)Abstract class: is a restricted class that cannot be used to create objects.
(to access it, it must be inherited from another class).
2)Abstract method: can only be used in an abstract class, and it does not have a body.
The body is provided by the subclass (inherited from).

    Java Interface
Another way to achieve abstraction in Java, is with interfaces.
An interface is a completely "abstract class" that is used to group related methods with empty bodies.
To access the interface methods, the interface must be "implemented" (kinda like inherited) by
another class with the implements keyword (instead of extends).
The body of the interface method is provided by the "implement" class.
    Notes on Interfaces
1)Like abstract classes, interfaces cannot be used to create objects.
2)Interface methods do not have a body - the body is provided by the "implement" class.
3)On implementation of an interface, you must override all of its methods.
4)Interface methods are by default abstract and public.
5)Interface attributes are by default public, static and final.
6)An interface cannot contain a constructor (as it cannot be used to create objects).
    Why And When To Use Interfaces?
1)To achieve security - hide certain details and only show the important details of an object (interface).
2)Java does not support "multiple inheritance" (a class can only inherit from one superclass).
However, it can be achieved with interfaces, because the class can implement multiple interfaces.
    Multiple Interfaces
To implement multiple interfaces, separate them with a comma.

    Java Enums
Enum is short for "enumerations", which means "specifically listed"
An enum is a special "class" that represents a group of constants.
(unchangeable variables, like final variables).
To create an enum,
-use the enum keyword and separate the constants with a comma.
Note that they should be in uppercase letters.
You can access enum constants with the dot syntax.
-The enum type has a values() method, which returns an array of all enum constants.
This method is useful when you want to loop through the constants of an enum.
    Difference between Enums and Classes
1)The only difference is that enum constants are public, static and final
(unchangeable - cannot be overridden).
2)An enum cannot be used to create objects, and it cannot extend other classes
(but it can implement interfaces).
    Why And When To Use Enums?
Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.

    Java User Input (Scanner)
The Scanner class is used to get user input,
and it is found in the java.util package.
To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation.

    Java Date and Time
Java does not have a built-in Date class,
but we can import the java.time package to work with the date and time API
The package includes many date and time classes.
1)LocalDate: Represents a date (year, month, day (yyyy-MM-dd)).
2)LocalTime: Represents a time (hour, minute, second and nanoseconds (HH-mm-ss-ns)).
3)LocalDateTime: Represents both a date and a time (yyyy-MM-dd-HH-mm-ss-ns).
4)DateTimeFormatter: Formatter for displaying and parsing date-time objects.
    Display Current Date
To display the current date, import the java.time.LocalDate class, and use its now() method.
    Display Current Time
To display the current time (hour, minute, second, and nanoseconds), import the java.time.LocalTime class,
and use its now() method
    Display Current Date and Time
To display the current date and time, import the java.time.LocalDateTime class, and use its now() method.
    Formatting Date and Time
You can use the DateTimeFormatter class with the ofPattern() method in the same
package to format or parse date-time objects.
The ofPattern() method accepts all sorts of values, if you want to display the date and time in a different format.

    Java Errors
Types of Errors in Java
1)Compile-Time Error: Detected by the compiler. Prevents code from running.
2)Runtime Error: Occurs while the program is running. Often causes crashes.
3)Logical Error: Code runs but gives incorrect results. Hardest to find.
    Common Compile-Time Errors
Compile-time errors occur when the program cannot compile due to syntax or type issues.
1)missing semicolon
2)undecleared Variable
3)Mismatched Types
    Common Runtime Errors
Runtime errors occur when the program compiles but crashes or behaves unexpectedly.
1)Division by zero
2)Array Index Out of Bounds
    Logical Errors
Logical errors happen when the code runs, but the result is not what you thought.
    Good Habits to Avoid Errors
1)Use meaningful variable names.
2)Read the error message carefully. What line does it mention?
3)Check for missing semicolons or braces.
4)Look for typos in variable or method names.

    Java Debugging
Debugging is the process of identifying and fixing errors or bugs in your code.
    It often involves:
-Reading error messages
-Tracing variable values step by step
-Testing small pieces of code independently
    Print Statements for Debugging
The most basic (and often most effective) way to debug Java code is to use System.out.println()
to print values and check the flow of the program.
-Add print statements before and after key lines of code to find out where things go wrong.
    Debugging with IDEs
Modern IDEs like IntelliJ IDEA, Eclipse, and NetBeans come with built-in debugging tools.
-Set breakpoints to pause the program at specific lines
-Step through code line by line
-Inspect variable values in real time
Tip: Use your IDE's debugger to find errors faster - it's more powerful than print statements alone!
    Debugging Checklist
-Read the full error message, it often tells you exactly what's wrong
-Check if all variables are initialized before use
-Print variable values to trace the problem
-Watch for off-by-one errors in loops and arrays
-Comment out sections of code to find bugs
    Java Exceptions
When an error occurs, Java will throw an exception (throw an error).
    Exception Handling (try and catch)
Exception handling lets you catch and handle errors during runtime - so your program doesn't crash.
-The "try" statement allows you to define a block of code to be tested for errors while it is being executed.
-The "catch" statement allows you to define a block of code to be executed, if an error occurs in the try block.
The try and catch keywords come in pairs.
    Finally
The finally statement lets you execute code, after try...catch, regardless of the result:
    The throw keyword
The throw statement allows you to create a custom error.
The throw statement is used together with an exception type.
There are many exception types available in Java.

    Java Files
File handling is an important part of any application.
Java has several methods for creating, reading, updating, and deleting files.
The File class from the java.io package, allows us to work with files.
To use the File class, create an object of the class, and specify the filename or directory name.
The File class has many useful methods for creating and getting information about files.
For example:
    Method	            Type	            Description
1)canRead()	            Boolean	            Tests whether the file is readable or not
2)canWrite()	        Boolean	            Tests whether the file is writable or not
3)createNewFile()	    Boolean	            Creates an empty file
4)delete()	            Boolean	            Deletes a file
5)exists()	            Boolean	            Tests whether the file exists
6)getName()	            String	            Returns the name of the file
7)getAbsolutePath()	    String	            Returns the absolute pathname of the file
8)length()	            Long	            Returns the size of the file in bytes
9)list()	            String[]	        Returns an array of the files in the directory
10)mkdir()         	    Boolean	            Creates a directory

    Java Create and Write To Files
1)Create a File
To create a file in Java, you can use the createNewFile() method.
This method returns a boolean value: true if the file was successfully created,
and false if the file already exists.
2)Write To a File
we use the FileWriter class together with its write() method to write some text to the file we created in the example above.
when you are done writing to the file, you should close it with the close() method.
3)Read a File
we use the Scanner class to read the contents of the text file we created in the previous chapter.
    Get File Information
To get more information about a file, use any of the File methods.
    Java Delete Files
To delete a file in Java, use the delete() method.
    Delete a Folder
You can also delete a folder. However, it must be empty.

    Java Data Structures
Data structures are ways to store and organize data so you can use it efficiently.
An array is an example of a data structure, which allows multiple elements to be stored in a single variable.
Java includes many other data structures as well, in the java.util package.
Each is used to handle data in different ways.
The common ones are :
1)ArrayList
2)HashSet
3)HashMap
Tip: Data structures are like supercharged arrays - more flexible and feature-rich!
    ArrayList
An ArrayList is a resizable array that can grow as needed.
It allows you to store elements and access them by index.
    HashSet
A HashSet is a collection where every element is unique -
no duplicates are allowed.
    HashMap
A HashMap stores key-value pairs,
which are great when you want to store values and find them by a key (like a name or ID).
    Iterators
An iterator is a way to loop through elements in a data structure.
It is called an "iterator" because "iterating" is the technical term for looping.

    The Collections Framework
The Java Collections Framework provides a set of interfaces (like List, Set, and Map)
and a set of classes (ArrayList, HashSet, HashMap, etc.) that implement those interfaces.
All of these are part of the java.util package.
They are used to store, search, sort, and organize data more easily - all using standardized methods and patterns.
    Core Interfaces in the Collections Framework
Here are some common interfaces, along with their classes:
Interface	               Common Classes	                                        Description
1)List	                   ArrayList, LinkedList	                                Ordered collection that allows duplicates.
2)Set	                   HashSet, TreeSet, LinkedHashSet	                        Collection of unique elements.
3)Map	                   HashMap, TreeMap, LinkedHashMap	                        Stores key-value pairs with unique keys.
        Overview of Classes
The table below gives an overview of the common data structure classes and their characteristics:
Interface	                        Class	                                  Description
1)List	                            ArrayList	                              Resizable array that maintains order and allows duplicates.
                                    LinkedList	                              List with fast insert and remove operations.

2)Set	                            HashSet	                                  Unordered collection of unique elements.
                                    TreeSet	                                  Sorted set of unique elements (natural order).
                                    LinkedHashSet	                          Maintains the order in which elements were inserted.

3)Map	                            HashMap	                                  Stores key/value pairs with no specific order.
                                    TreeMap	                                  Sorted map based on the natural order of keys.
                                    LinkedHashMap	                          Maintains the order in which keys were inserted.

            Java List Interface
The List interface is part of the Java Collections Framework and represents an ordered collection of elements.
You can access elements by their index, add duplicates, and maintain the insertion order.
Since List is an interface, you cannot create a List object directly.
Instead, you use a class that implements the List interface, such as
-ArrayList - like a resizable array with fast random access.
-LinkedList - like a train of cars you can easily attach or remove.
    Common List Methods
-add()	Adds an element to the end of the list
-get()	Returns the element at the specified position
-set()	Replaces the element at the specified position
-remove()	Removes the element at the specified position
-size() Returns the number of elements in the list
    Array                                   List
Fixed size	                            Dynamic size
Faster performance for raw data	        More flexible and feature-rich
Not part of Collections Framework	    Part of the Collections Framework

    Java ArrayList
An ArrayList is like a resizable array.
It is part of the java.util package and implements the List interface.
To use an ArrayList, you must first import it from java.util.
Now you can use methods like add(), get(), set(), and remove() to manage your list of elements.
    Add Elements
To add elements to an ArrayList, use the add() method.
You can also add an element at a specified position by referring to the index number.
An ArrayList keeps elements in the same order you add them.
    Access an Element
To access an element in the ArrayList,
use the get() method and refer to the index number.
    Change an Element
To modify an element,
use the set() method and refer to the index number.
    Remove an Element
To remove an element,
use the remove() method and refer to the index number.
To remove all the elements in the ArrayList,
use the clear() method
    ArrayList Size
To find out how many elements an ArrayList have,
use the size method.
    Loop Through an ArrayList
Loop through the elements of an ArrayList with a for loop, and use the size() method
to specify how many times the loop should run.
    Sort an ArrayList
Another useful class in the java.util package is the Collections class, which include the sort() method
The sort() method sorts lists alphabetically or numerically
    The List Interface
Sometimes you will see both List and ArrayList in Java code, like this:
    import java.util.List;
    import java.util.ArrayList;
    List<String> cars = new ArrayList<>();

This means the variable (cars) is declared as a List (the interface),
but it stores an ArrayList object (the actual list).

    Java LinkedList
The LinkedList class is almost identical to the ArrayList.
The LinkedList class has the same methods as ArrayList because both follow the List interface.
    How the LinkedList works
The LinkedList stores its elements in "containers."
The list has a link to the first container and each container has a link to the next container in the list.
To add an element to the list, the element is placed into a new container and that
container is linked to one of the other containers in the list.
    When To Use
Use an ArrayList for storing and accessing data, and LinkedList to manipulate data.
    LinkedList Methods
1)addFirst(): Adds an element to the beginning of the list.
2)addLast(): Add an element to the end of the list.
3)removeFirst(): Remove an element from the beginning of the list.
4)removeLast(): Remove an element from the end of the list.
5)getFirst(): Get the element at the beginning of the list.
6)getLast(): Get the element at the end of the list

    Java List Sorting
Another useful class in the java.util package is the Collections class,
which include the sort() method for sorting lists alphabetically or numerically.

    Java Set
The Set interface is part of the Java Collections Framework and is used to store a collection of unique elements.
Unlike a List, a Set does not allow duplicates.
    Common classes that implement Set
-HashSet - fast and unordered
-TreeSet - sorted set
-LinkedHashSet - ordered by insertion
    Common Set Methods
-add(): Adds an element if it's not already in the set
-remove(): Removes the element from the set
-contains(): Checks if the set contains the element
-size(): Returns the number of elements
-clear(): Removes all elements
List	                    Set
Allows duplicates	        Does not allow duplicates
Maintains order	            Does not guarantee order
Access by index	            No index-based access

    Java HashSet
A HashSet is a collection of elements where every element is unique.
It is part of the java.util package and implements the Set interface.
    Check If an Element Exists
To check whether an element exists in a HashSet,
use the contains() method.
    Remove an Element
To remove an element, use the remove() method.
To remove all elements, use the clear() method.
    HashSet Size
Use size() to count how many unique elements are in the set.

    Java TreeSet
A TreeSet is a collection that stores unique elements in sorted order.
It is part of the java.util package and implements the Set interface.
Unlike HashSet, which has no order, TreeSet keeps its elements sorted automatically.
Now you can use methods like add(), contains(), and remove() to manage your sorted set of elements.
Use "HashSet" when you care about speed,
and "TreeSet" when you need sorted elements.

    Java LinkedHashSet
-A LinkedHashSet is a collection that stores unique elements and remembers the order they were added.
-It is part of the java.util package and implements the Set interface.
-Use LinkedHashSet when you want a set that does not allow duplicates and keeps the original insertion order.
-you can use methods like add(), contains(), and remove() to manage your collection.
-Use HashSet when you only care about uniqueness and speed. Use LinkedHashSet when order matters.

    Java Map Interface
The Map interface is a part of the Java Collections Framework and is used to store key-value pairs.
Each key must be unique, but values can be duplicated.
A Map is useful when you want to associate a key with a value.
    Common classes that implement Map:
1)HashMap - fast and unordered
2)TreeMap - sorted by key
3)LinkedHashMap - ordered by insertion
    Common Map Methods
1)put(): Adds or updates a key-value pair
2)get(): Returns the value for a given key
3)remove():	Removes the key and its value
4)containsKey(): Checks if the map contains the key
5)keySet(): Returns a set of all keys
    Java HashMap
A HashMap stores items in key/value pairs, where each key maps to a specific value.
It is part of the java.util package and implements the Map interface.
A HashMap can store many different combinations, such as:
-String keys and Integer values.
-String keys and String values.
You can use methods like put() to add key/value pairs,
get() to retrieve a value by key, and
remove() to delete an entry - all by using keys instead of index numbers.
-If there is a duplicate value,
the latest value will overwrite the previous one, because keys in a HashMap must be unique.
-Note: The size only counts unique keys.
If a key is added more than once, only the latest value is kept.
-Note: When looping through a Hashmap
Use the keySet() method if you only want the keys, and
use the values() method if you only want the values.

    Java TreeMap
A TreeMap is a collection that stores key/value pairs in sorted order by key.
It is part of the java.util package and implements the Map interface.
you can use methods like put(), get(), and remove() to manage sorted key/value pairs.
The size only counts unique keys.
If a key is added more than once, only the latest value is kept.
    Loop Through a TreeMap
Loop through the items of a TreeMap with a for-each loop.
Use the keySet() method if you only want the keys,
and use the values() method if you only want the values.
Use HashMap for performance, and TreeMap when you need sorted keys.
    Java LinkedHashMap
A LinkedHashMap stores keys and values,
and keeps them in the same order you put them in.
It is part of the java.util package and implements the Map interface.
Use LinkedHashMap when you want predictable iteration order (insertion order).
Duplicates are ignored.
The size only counts unique keys. If a key is added more than once, only the latest value is kept.
    Loop Through a LinkedHashMap
You can loop through a LinkedHashMap using a for-each loop. Use:
    keySet() to get all keys
    values() to get all values
 Use LinkedHashMap when you want the map to remember the order in which entries were added.

        Java Iterator
An Iterator is an object that can be used to loop through collections.
like ArrayList and HashSet.
It is called an "iterator" because "iterating" is the technical term for looping.
To use an Iterator, you must import it from the java.util package.
    Getting an Iterator
The iterator() method can be used to get an Iterator for any collection
    Removing Items from a Collection
Iterators are designed to easily change the collections that they loop through.
The remove() method can remove items from a collection while looping.
Note: Trying to remove items using a for loop or a for-each loop would not work correctly because the collection is changing size at the same time that the code is trying to loop.

    Java Wrapper Classes
Wrapper classes provide a way to use primitive data types.
primitive type and the equivalent wrapper class.
    Primitive Data Type 	    Wrapper Class
    byte	                    Byte
    short	                    Short
    int	                        Integer
    long	                    Long
    float	                    Float
    double	                    Double
    boolean	                    Boolean
    char	                    Character

Sometimes you must use wrapper classes, for example when working with Collection objects.
    Creating Wrapper Objects
To create a wrapper object, use the wrapper class instead of the primitive type.
Since you're now working with objects, you can use certain methods to get information about the specific object.
The following methods are used to get the value associated with the corresponding wrapper object:
intValue(), byteValue(), shortValue(), longValue(), floatValue(), doubleValue(), charValue(), booleanValue().
    toString()
Another useful method is the toString() method, which is used to convert wrapper objects to strings.

        Java Generics
Generics allow you to write classes, interfaces, and methods that work with different data types,
without having to specify the exact type in advance.
This makes your code more flexible, reusable, and type-safe.
    Why Use Generics?
-Code Reusability: Write one class or method that works with different data types.
-Type Safety: Catch type errors at compile time instead of runtime.
-Cleaner Code: No need for casting when retrieving objects.
This way, the same class can be reused with different data types without rewriting the code.
You can also create methods that work with any data type using generics.
    Bounded Types
You can use the extends keyword to limit the types a generic class or method can accept.
    Generic Collections
Java Collections like ArrayList and HashMap use generics internally.
    Summary
-Generics make your code flexible and type-safe.
-Use T or another letter to define a type placeholder.
-Generics can be applied to classes, methods, and interfaces.
-Use bounds to limit what types are allowed.

    Java Annotations
Annotations are special notes you add to your Java code.
They start with the @ symbol.
They don't change how your program runs, but they give extra information to the compiler or tools.

    Built-in Annotations
Java includes several built-in annotations.
Here are some of the most commonly used annotations:
-@Override: Indicates that a method overrides a method in a superclass.
-@Deprecated: Marks a method or class as outdated or discouraged from use.
-@SuppressWarnings: Tells the compiler to ignore certain warnings.
    @Override Annotation
The @Override annotation helps the compiler check that a method really overrides a method from a superclass.
It's not required, but it's highly recommended because it helps catch errors.
    @Deprecated Annotation
The @Deprecated annotation warns developers not to use a method because it may be removed or replaced in the future.
    @SuppressWarnings Annotation
The @SuppressWarnings annotation tells the compiler to ignore specific warnings, like "unchecked" or "deprecation".
Using raw types like ArrayList without specifying a type (e.g. ArrayList<String>) usually causes an "unchecked" warning.
The annotation @SuppressWarnings("unchecked") tells the compiler to ignore that warning.
This is useful when working with old code or when you're sure the operation is safe.
However, instead of hiding the warning, you can fix it like this:
ArrayList<String> cars = new ArrayList<>();

    Java Regular Expressions
A regular expression is a sequence of characters that forms a search pattern.
When you search for data in a text, you can use this search pattern to describe what you are searching for.

-A regular expression can be a single character, or a more complicated pattern.
-Regular expressions can be used to perform all types of text search and text replace operations.
Java does not have a built-in Regular Expression class
but we can import the java.util.regex package to work with regular expressions
The package includes the following classes:
1)Pattern Class - Defines a pattern (to be used in a search)
2)Matcher Class - Used to search for the pattern
3)PatternSyntaxException Class - Indicates syntax error in a regular expression pattern

-The pattern is created using the Pattern.compile() method
-The matcher() method is used to search for the pattern in a string.
-The find() method returns true if the pattern was found in the string and false if it was not found.
    Flags
Flags in the compile() method change how the search is performed.
Here are a few of them:
-Pattern.CASE_INSENSITIVE - The case of letters will be ignored when performing a search.
-Pattern.LITERAL - Special characters in the pattern will not have any special meaning and will be
treated as ordinary characters when performing a search.
-Pattern.UNICODE_CASE - Use it together with the
CASE_INSENSITIVE flag to also ignore the case of letters outside of the English alphabet.
    Regular Expression Patterns
The first parameter of the Pattern.compile() method is the pattern.
It describes what is being searched for.
    Brackets are used to find a range of characters:
-[abc]	Find one character from the options between the brackets.
-[^abc]	Find one character NOT between the brackets.
-[0-9]	Find one character from the range 0 to 9.
    Metacharacters
Metacharacters are characters with a special meaning
check w3schools
    Quantifiers
Quantifiers define quantities:
check w3schools
    Java Threads
Threads allows a program to operate more efficiently by doing multiple things at the same time.
Threads can be used to perform complicated tasks in the background without interrupting the main program.
    Creating a Thread
There are two ways to create a thread.
1)It can be created by extending the Thread class and overriding its run() method.
2)Another way to create a thread is to implement the Runnable interface.
    Running Threads
-If the class extends the Thread class,
the thread can be run by creating an instance of the class and call its start() method.
-If the class implements the Runnable interface,
the thread can be run by passing an instance of the class to a Thread object's constructor
and then calling the thread's start() method.
    Differences between "extending" and "implementing" Threads
The major difference is that when a class extends the Thread class, you cannot extend any other class.
 but by implementing the Runnable interface, it is possible to extend from another class as well.
    Concurrency Problems
Because threads run at the same time as other parts of the program,
there is no way to know in which order the code will run.
When the threads and main program are reading and writing the same variables, the values are unpredictable.
The problems that result from this are called "concurrency problems".
-To avoid concurrency problems, it is best to share as few attributes between threads as possible.
If attributes need to be shared,
one possible solution is to use the isAlive() method of the thread
to check whether the thread has finished running before using any attributes that the thread can change.

    Java Lambda Expressions
Lambda Expressions were added in Java 8.
A lambda expression is a short block of code which takes in parameters and returns a value.
Lambda expressions are similar to methods,
but they do not need a name and they can be implemented right in the body of a method.
    Syntax
The simplest lambda expression contains a single parameter and an expression.
    parameter -> expression
-To use more than one parameter, wrap them in parentheses.
    (parameter1, parameter2) -> expression
Expressions are limited.
They have to immediately return a value, and they cannot contain variables, assignments or statements such as if or for.
-In order to do more complex operations, a code block can be used with curly braces.
If the lambda expression needs to return a value, then the code block should have a return statement.
    (parameter1, parameter2) -> { code block }
-Lambda expressions can be stored in variables if the variable's type is an interface which has only one method.

    Java Advanced Sorting (Comparator and Comparable)
To sort objects you need to specify a rule that decides how objects should be sorted.
For example, if you have a list of cars you might want to sort them by year, the rule could be that cars with an earlier year go first.
The Comparator and Comparable interfaces allow you to specify what rule is used to sort objects.
Being able to specify a sorting rule also allows you to change how strings and numbers are sorted.
    Comparators
An object that implements the Comparator interface is called a comparator.
The Comparator interface allows you to create a class with a compare() method t
hat compares two objects to decide which one should go first in a list.
The compare() method should return a number which is:
-Negative if the first object should go first in a list.
-Positive if the second object should go first in a list.
-Zero if the order does not matter.
    Using a Lambda Expression
To make the code shorter,
the comparator can be replaced with a lambda expression
which has the same arguments and return value as the compare() method.
    Special Sorting Rules
Comparators can also be used to make special sorting rules for strings and numbers.
    The Comparable Interface
The Comparable interface allows an object to specify its own sorting rule with a compareTo() method.
The compareTo() method takes an object as an argument and compares the comparable with the argument to
decide which one should go first in a list.
Like the comparator, the compareTo() method returns a number which is:
-Negative if the comparable should go first in a list.
-Positive if the other object should go first in a list.
-Zero if the order does not matter.
Many native Java classes implement the Comparable interface,
such as String and Integer.
This is why strings and numbers do not need a comparator to be sorted
    Comparator vs. Comparable
A comparator is an object with one method that is used to compare two different objects.

A comparable is an object which can compare itself with other objects.

It is easier to use the Comparable interface when possible, but the Comparator interface is more powerful because it allows you to sort any kind of object even if you cannot change its code.


