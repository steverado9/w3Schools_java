    WHAT IS JAVA?
Java is a popular programming language and It is owned by Oracle.
It is used for:
-Mobile applications (specially Android apps)
-Desktop applications
-Web applications
-Web servers and application servers
-Games
-Database connection And much, much more!
    Why Use Java?
-Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.).
-It is one of the most popular programming languages in the world.
-Java is an object oriented language which gives a clear structure to programs and allows
code to be reused, lowering development costs.
    How to write Java code(syntax)
-In Java, every application begins with a class name
-The class must match the filename.
-The class name should always start with an uppercase first letter.
    The main method
The main() method is required and you will see it in every Java program.
Any code inside the main() method will be executed.
The curly braces {} marks the beginning and the end of a block of code.
    System.out.println()
Inside the main() method, we can use the println() method to print a line of text to the screen/console.
-System is a built-in Java class that contains useful members, such as out, which is short for "output".
You should also note that each code statement must end with a semicolon (;).
    Print Text
-println() method, short for "print line", is used to print/output a value to the screen (or a file).
You can add as many println() methods as you want.
Note that it will add a new line for each method.
-Double Quotes
Text must be wrapped inside double quotations marks "".
-print() method: which is similar to println()
The only difference is that it does not insert a new line at the end of the output.
    Print Numbers
You can also use the println() method to print numbers.
However, unlike text, we don't put numbers inside double quotes.
    Java Comments
Comments can be used to explain Java code, and to make it more readable.
It can also be used to prevent execution when testing alternative code.
-Single-line Comments
Single-line comments start with two forward slashes (//).
Any text between // and the end of the line is ignored by Java (will not be executed).
-Java Multi-line Comments
Multi-line comments start with /* and ends with */.
Any text between /* and */ will be ignored by Java.
    Java Variables
Variables are containers for storing data values.
In Java, there are different types of variables, for example
-String: stores text, such as "Hello". String values are surrounded by double quotes.
-int: stores integers (whole numbers), without decimals, such as 123 or -123.
-float: stores floating point numbers, with decimals, such as 19.99 or -19.99.
-char: stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes.
-boolean: stores values with two states: true or false.
    Declaring (Creating) Variables
To create a variable in Java, you need to:
-Choose a type (like int or String).
-Give the variable a name (like x, age, or name).
-Optionally assign it a value using "=".
Syntax
type variableName = value;
    Final Variables
If you don't want to overwrite existing values, use the final keyword
(this will declare the variable as "final" or "constant", which means unchangeable and read-only).
    Display Variables
The println() method is often used to display variables.
    The + operator
-To combine both text and a variable, use the + character.
-You can also use the + character to add a variable to another variable.
-For numeric values, the + character works as a mathematical operator
-To declare more than one variable of the same type, you can use a comma-separated list.
    Java Identifiers
All Java variables must be identified with unique names.
These unique names are called identifiers.
Note: It is recommended to use descriptive names in order to create understandable and maintainable code
    The general rules for naming variables are:
-Names can contain letters, digits, underscores, and dollar signs.
-Names must begin with a letter.
-Names should start with a lowercase letter, and cannot contain whitespace.
-Names can also begin with $ and _.
-Names are case-sensitive.
-Reserved words (like Java keywords, such as int or boolean) cannot be used as names.

    Java Data Types
A variable in Java must be a specified data type.
Data types are divided into two groups:
1)Primitive data types
2)Non-primitive data types(reference types)
    Primitive Data Types
Primitive Data Types can hold only one data(values).
    There are eight primitive data types in Java
1)byte:	Stores whole numbers from -128 to 127.
2)short: Stores whole numbers from -32,768 to 32,767.
3)int: Stores whole numbers from -2,147,483,648 to 2,147,483,647.
4)long:	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.
5)float: Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits.
6)double: Stores fractional numbers. Sufficient for storing 15 to 16 decimal digits.
7)boolean: Stores true or false values.
8)char:	Stores a single character/letter or ASCII values.
    Java Numbers
Primitive number types are divided into two groups.
1)Integer types
-stores whole numbers, positive or negative, without decimals.
-Valid types are byte, short, int and long.
2)Floating point types
-represents numbers with a fractional part, containing one or more decimals.
-There are two types: float and double.
    Integer Types
1)Byte
-The byte data type can store whole numbers from -128 to 127.
-This can be used instead of int or other integer types to save memory
when you are certain that the value will be within -128 and 127:
2)Short
 -The short data type can store whole numbers from -32768 to 32767.
3)Int
-The int data type can store whole numbers from -2147483648 to 2147483647.
-In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.
4)Long
-The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807.
-This is used when int is not large enough to store the value.
-Note that you should end the value with an "L".
    Floating Point Types
You should use a floating point type whenever you need a number with a decimal.
The "float" and "double" data types can store fractional numbers.
Note that you should end the value with an "f" for floats and "d" for doubles.
The precision of a floating point value indicates how many digits the value can have after the decimal point.
1)float
The precision of float is only six or seven decimal digits.
2)double
-This have a precision of about 16 digits.
-Therefore it is safer to use double for most calculations.
    Scientific Numbers
A floating point number can also be a scientific number with an "e" to indicate the power of 10.
    Boolean Types
Java has a boolean data type, which can only take the values true or false.
    Characters
-The char data type is used to store a single character.
-The character must be surrounded by single quotes, like 'A' or 'c'.
-Alternatively, you can use ASCII values to display certain characters.

    Non-primitive data types
Non-primitive data types are called reference types because they refer to objects.
    Strings
The String data type is used to store a sequence of characters (text).
String values must be surrounded by double quotes.
The String type is so much used and integrated in Java, that some call it "the special ninth type".

    Java Type Casting
Type casting is when you assign a value of one primitive data type to another type.
In Java, there are two types of casting:
1)Widening Casting (automatically): converting a smaller type to a larger type size.
byte -> short -> char -> int -> long -> float -> double.
2)Narrowing Casting (manually):  converting a larger type to a smaller size type.
double -> float -> long -> int -> char -> short -> byte.

    Java Operators
Operators are used to perform operations on variables and values.
Java divides the operators into the following groups:
1)Arithmetic operators
2)Assignment operators
3)Comparison operators
4)Logical operators
5)Bitwise operators
    1.Arithmetic operators
Arithmetic operators are used to perform common mathematical operations.
1)Addition(+): Adds together two values.
2)Subtraction(-): Subtracts one value from another.
3)Multiplication(*): Multiplies two values.
4)Division(/): Divides one value by another.
5)Modulus(%): Returns the division remainder.
6)Increment(++): Increases the value of a variable by 1.
7)Decrement(--): Decreases the value of a variable by 1.
    2.Assignment operators
-Assignment operators(=): are used to assign values to variables.
-Addition assignment operator(+=): adds a value to a variable. etc.
    3.Java Comparison Operators
Comparison operators are used to compare two values (or variables).
The return value of a comparison is either true or false.
1)Equal to(==)
2)Not equal (!=)
3)Greater than(>)
4)Less than(<)
5)Greater than or equal to (>=)
6)Less than or equal to (<=)
    4. Logical Operators
You can also test for true or false values with logical operators.
1)Logical and (&&): returns true if both statements are true.
2)Logical or (||): returns true if one of the statement is true.
3)Logical not (!): reverses the result. i.e not this condition.

    Java Strings
Strings are used for storing text.
A String in Java is actually an object,
which contain methods that can perform certain operations on strings.
    String Methods
1)length(): used to check the length(size) of a string.
2)toUpperCase(): converts a string to uppercase.
3)toLowerCase(): converts a string to lowercase.
4)indexOf(parameter): This return the index(the position) of the first occurrence of a specified text in a string.
Java counts positions from zero.
    String Concatenation
The + operator can be used between strings to combine them.
This is called concatenation.
5)concat(): You can use this method to concat two strings.
    Java Numbers and Strings
Java uses the + operator for both addition and concatenation.
Numbers are added. Strings are concatenated.
If you add a number and a string, the result will be a string concatenation.
    Java Special Characters(Escape characters)
backlash(\) escape character: turns special characters into string characters.

    Java Math
The Java Math class has many methods that allows you to perform mathematical tasks on numbers.
1)Math.max(x,y): This method is used to find the highest value of x and y.
2)Math.min(x,y): This method can be used to find the lowest value of x and y.
3)Math.sqrt(x): This method returns the square root of x.
4)Math.abs(x): This method returns the absolute (positive) value of x.
5)Math.random(): returns a random number between 0.0 (inclusive), and 1.0 (exclusive).

    Java Booleans
Java has a boolean data type, which can store true or false values.
-Boolean expression: This returns a boolean value: true or false.

    Java If ... Else
-we use if to specify a block of code to be executed, if a specified condition is true.
-we use else to specify a block of code to be executed, if the same condition is false.
-Use else if to specify a new condition to test, if the first condition is false.
-Use switch to specify many alternative blocks of code to be executed.
    Ternary operator
This is short-hand for if-else.
It is used to replace simple if else statements.
Syntax
varaible = (condition) ? expressionTrue : expressionFalse;
     Switch Statements
Instead of writing many if..else statements, you can use the switch statement.
The switch statement selects one of many code blocks to be executed.
This is how it works:
-The switch expression is evaluated once.
-The value of the expression is compared with the values of each case.
-If there is a match, the associated block of code is executed.
    The break Keyword
A break can save a lot of execution time because it "ignores" the execution of all the rest of the code in the switch block.
    The default Keyword
The default keyword specifies some code to run if there is no case match.

    Loops
Loops can execute a block of code as long as a specified condition is reached.
    Types of loops
1)While loop: loops through a block of code as long as a specified condition is true.
2)Do/While loop: This loop will execute the code block once, before checking if the condition is true.
The loop as long as the condition is true.
3)For loop: When you know exactly how many times you want to loop through a block of code,
use the for loop instead of a while loop.
-Statement 1 is executed (one time) before the execution of the code block.
-Statement 2 defines the condition for executing the code block.
-Statement 3 is executed (every time) after the code block has been executed.
4)For-each Loop: This is used exclusively to loop through elements in an array (or other data structures):

    Java Break and Continue
1)Break statement(stop executing)
It was used to "jump out" of a switch statement.
The break statement can also be used to jump out of a loop.
2)continue statement(skip condition and continue executing)
The continue statement breaks one iteration (in the loop).
if a specified condition occurs, and continues with the next iteration in the loop.

    Java Arrays
Arrays are used to store multiple values in a single variable.
To declare an array, define the variable type with square brackets.
    Access the Elements of an Array
You can access an array element by referring to the index number.
Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.
    Change an Array Element
To change the value of a specific element, refer to the index number
    Array Length
To find out how many elements an array has.
    Loop Through an Array
You can loop through the array elements with the for loop,
and use the length property to specify how many times the loop should run.
    Multidimensional Arrays
A multidimensional array is an array of arrays.
Multidimensional arrays are useful when you want to store data as a tabular form, like a table with rows and columns.
    Access Elements
To access the elements of a Multidimensional array,
specify two indexes: one for the array, and one for the element inside that array.
    Java Methods
A method is a block of code which only runs when it is called.